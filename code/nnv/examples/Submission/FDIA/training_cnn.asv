%% Training of CNN for FDIA Classification

t = tic; % track total time for training

%% Load Data



%% Training CNN
layers = [ 
    imageInputLayer([28 28 1])
    convolution2dLayer(3,8,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer(2,'Stride',2)
    
    convolution2dLayer(3,16,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    maxPooling2dLayer(2,'Stride',2)
    
    convolution2dLayer(3,32,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    convolution2dLayer(3,64,'Padding','same')
    batchNormalizationLayer
    reluLayer
    
    fullyConnectedLayer(100)
    batchNormalizationLayer
    reluLayer
    
    fullyConnectedLayer(10)
    softmaxLayer
    classificationLayer];


options = trainingOptions('sgdm', ...
    'InitialLearnRate',0.01, ...
    'MaxEpochs',4, ...
    'Shuffle','every-epoch', ...
    'ValidationData',imdsValidation, ...
    'ValidationFrequency',30, ...
    'Verbose',false, ...
    'Plots','training-progress');

net = trainNetwork(imdsTrain,layers,options);

% Get Accuracy 
YPred = predict(net, XTest);
YPred = round(YPred);

% Convert YPred to categorical for comparison
YPredCategorical = categorical(YPred);

accuracy = sum(YPredCategorical == YTest) / numel(YTest);
disp ("Validation accuracy = "+string(accuracy));

% Save model
disp("Saving model...");
save('_model.mat', 'net', 'accuracy');

toc(t);
